1. A system call is one that directly communicates directly with the system kernel. Everything surrounding the overall sys library does system calls. An example of a system call would be using the library unistd which is used in the code as gethostname, getcwd, and getenv.
2. With execvp searches the path environment to find the program if it doesn’t have a directory in it. This makes the path always executable, execve takes an extra argument to get the environment or uses the current environment. Both take in arguments to use for environments but execve makes a new environment with the arguments. The execvp allows the output to be in the parent process which allows easier use even though opening new processes with execve would be easier it wouldn’t be able to output to parent process.
3. Kill is easier to terminate a program because the kill is done by outside force destroying the process. Exit would be an alternative system call and to be considered when using exit would be that the program terminates from the inside which can cause problems when segment faults happen.
4. If I were to redesign this program, I would improve it by allowing more freedom of how functions are defined and run. With the descriptions of some of the functions there was lacking information for the parameters used inside. This could be simplified by saying what the function could use or have passed inside of it instead of requiring it. Also, with current information given from previous classes it would be useful to explain the library uses in further detail. This would give a better coding experience as it would allow more creativity in how to take on a problem even with some limitations.

